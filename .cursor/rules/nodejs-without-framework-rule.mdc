---
description: 
globs: 
alwaysApply: false
---
# 프레임워크 없이 구현하는 Node.js HTTP 서버 규칙

## 프로젝트 개발 지침

### 코드 품질
- 모든 코드는 가독성을 최우선으로 작성할 것
- 중복 코드는 최소화하고 재사용 가능한 함수나 클래스로 분리할 것
- 모든 함수와 메서드는 단일 책임 원칙을 따를 것
- 변수와 함수 이름은 명확하고 의미있게 작성할 것
- 하드코딩된 값은 상수로 분리할 것

### 코드 스타일
- 프로젝트의 코딩 컨벤션을 일관되게 유지할 것
- 클래스, 함수, 변수 명명 규칙을 준수할 것
- 주석은 코드가 '왜' 그렇게 작성되었는지 설명할 것

## 문서화
- 모든 공개 API에는 문서 주석을 작성할 것
- README 파일에 프로젝트 설정 및 실행 방법을 상세히 기술할 것
- 복잡한 알고리즘이나 비즈니스 로직은 별도 문서로 작성할 것
- 변경 사항은 CHANGELOG에 기록할 것

## 테스트
- 모든 새로운 기능에는 단위 테스트를 작성할 것
- 테스트 커버리지는 최소 80% 이상 유지할 것
- 테스트는 독립적이고 반복 가능하게 작성할 것
- 중요한 사용자 흐름에 대한 통합 테스트를 구현할 것

## 보안
- 사용자 입력은 항상 검증하고 이스케이프 처리할 것
- 민감한 정보는 환경 변수나 보안 저장소에 보관할 것
- 외부 라이브러리는 보안 취약점을 정기적으로 점검할 것
- SQL Injection, XSS 등 일반적인 보안 취약점을 방지할 것

## 성능
- 데이터베이스 쿼리는 최적화할 것
- 불필요한 API 호출은 최소화할 것
- 대용량 데이터 처리 시 페이지네이션 적용할 것
- 리소스 집약적인 작업은 비동기 처리할 것

## 버전 관리
- 커밋 메시지는 명확하고 설명적으로 작성할 것
- 기능 개발은 별도 브랜치에서 진행할 것
- PR 전 코드 리뷰를 필수로 진행할 것
- 메인 브랜치는 항상 배포 가능한 상태로 유지할 것

## 프로젝트 구조
- 계층형 아키텍처를 기반으로 패키지 구조화할 것
- 각 패키지는 단일 책임을 가질 것
- 순환 의존성은 엄격히 금지할 것
- 도메인 중심 설계 원칙을 따를 것

## 파일 구조 및 명명 규칙

### 디렉토리 구조

📦node-http-without-framework
 ┣ 📂.cursor
 ┃ ┗ 📂rules   // Cursor rules 저장 디렉토리
 ┣ 📂data   // DB대신 사용하는 텍스트 파일로 구성된 저장소
 ┣ 📂src
 ┃ ┣ 📂common   // Router, Middleware와 같은 공통 요소들
 ┃ ┃ ┗ 📂router   // Router
 ┃ ┣ 📂utils   // 재사용 가능한 유틸리티 함수
 ┃ ┣ 📂configs   // 환경변수 관리
 ┃ ┣ 📂controllers  // Controller
 ┃ ┣ 📂domains   // 스키마
 ┃ ┣ 📂repositories   // Repository
 ┃ ┣ 📂routes   // Route
 ┃ ┣ 📂services   // Service
 ┃ ┗ 📜app.js
 ┣ 📜.env
 ┣ 📜.gitignore
 ┣ 📜.nvmrc
 ┣ 📜README.md
 ┣ 📜package-lock.json
 ┣ 📜package.json
 ┗ 📜server.js

 ### 파일 위치

 - 모든 소스는 `src` 디렉토리에 위치하도록 합니다.
 - `Middleware`, `Error Handling` 관련 공통 요소들은 `src/common/` 폴더에 위치하도록 합니다.
 - 만약, `게시글`과 관련된 새로운 기능을 구현한다고 하면 아래의 규칙에 맞게 작업합니다.
   - `domains`에 스키마 구조 관련 파일을 생성합니다.
   - `src/controllers`에 `post.controller.js`와 같이 파일을 생성합니다. 이는 `routes, services, repositories`도 동일하게 진행합니다.

### 파일 명명 규칙

- JavaScript 프로젝트이기 때문에 모든 파일은 `.js` 확장자를 사용하도록 합니다.
- 파일 이름은 명확하고 의미있게 작성해야 하며, 역할을 잘 드러내도록 합니다.

## 환경 설정 관리

- 민감한 설정은 `.env`에 저장하고 `src/configs/app.config.js`를 통해 접근하도록 합니다.

## DB 역할을 하는 데이터 저장소 (텍스트 파일)

- 텍스트 파일 데이터베이스 관련 로직은 `data` 디렉토리에 위치하도록 합니다.

## 유틸리티 함수 정의

- 재사용이 가능한 일반 유틸리티 함수는 `src/utils` 디렉토리에 위치하도록 합니다.
- 계층별 책임이 명확한 비즈니스 로직이나 데이터베이스 접근 로직은 포함하지 않도록 합니다.

## Layered Architecture

### Router

- HTTP 경로를 정의하고 Controller로 요청을 위임하도록 합니다.
- 직접적인 비즈니스 로직, 데이터베이스 상호작용, JWT 생성 및 검증 로직 등을 포함하지 않도록 합니다.
- RESTful API 생성 규칙을 지키도록 합니다.

### Controller

- HTTP 요청 및 응답을 처리하고 Service 계층을 호출합니다.
- 비즈니스 로직 처리를 위해 적잘한 Service 메서드를 호출해야 합니다.
- 마찬가지로, 직접적인 데이터베이스 상호작용이나 텍스트 파일 접근은 없어야 합니다.

### Service

- 핵심 비즈니스 로직을 포함하고 레포지토리 계층을 호출합니다.
- 데이터 저장소와의 상호작용을 위해 Repository 호출을 조율해야 합니다.
- 해당 레이어에서 JWT 생성 및 검증 로직을 포함할 수 있습니다. (유틸리티 함수 활용 가능)
- 직접적인 HTTP 요청과 응답은 피하도록 합니다.

### Repository

- 데이터 저장소와 직접 상호작용 하도록 합니다.
- 데이터 저장소 작업(읽기/쓰기 등)을 추상화해야 합니다.
- 단, 비즈니스 로직이나 HTTP 요청 및 응답 처리를 포함하면 안됩니다.
